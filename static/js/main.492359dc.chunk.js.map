{"version":3,"sources":["logo.svg","components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Chat","e","preventDefault","text","this","refs","messageText","value","props","actions","send","_this","i","messages","map","message","react_default","a","createElement","className","key","style","color","onSubmit","handleFormSubmit","type","ref","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","sock","SockJS","self","assertThisInitialized","onopen","console","log","onmessage","data","setState","toConsumableArray","state","concat","onclose","components_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kOCgCzBC,2LA7BMC,GACbA,EAAEC,iBACF,IAAIC,EAAOC,KAAKC,KAAKC,YAAYC,MACjCH,KAAKI,MAAMC,QAAQC,KAAKP,oCAGnB,IAAAQ,EAAAP,KACDQ,EAAI,EACJC,EAAWT,KAAKI,MAAMK,SAASC,IAAI,SAAAC,GAChC,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAkBC,IAAKR,IAAKS,MAAO,CAACC,MAAO,SAAUP,KAEjF,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,QAAMK,SAAU,SAACtB,GAAD,OAAOU,EAAKa,iBAAiBvB,KACzCe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,SAAOO,KAAK,OAAOC,IAAI,cAAcP,UAAU,iBAC/CH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mBACZH,EAAAC,EAAAC,cAAA,UAAQO,KAAK,SAASN,UAAU,iBAAhC,YAKhBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcN,WAxBzBc,aC2DJC,cArDX,SAAAA,EAAYpB,GAAO,IAAAG,EAAAkB,OAAAC,EAAA,EAAAD,CAAAzB,KAAAwB,GACfjB,EAAAkB,OAAAE,EAAA,EAAAF,CAAAzB,KAAAyB,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA7B,KAAMI,IAIN,IAAM0B,EAAO,IAAIC,IAAO,8CAEpBC,EAAIP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAlB,IAPO,OASfuB,EAAKI,OAAS,WACVC,QAAQC,IAAI,8BAGhBN,EAAKO,UAAY,SAAAxC,GACbsC,QAAQC,IAAI,oBAAqBvC,EAAEyC,MAEnCN,EAAKO,SAAS,CAAE9B,SAASgB,OAAAe,EAAA,EAAAf,CAAKO,EAAKS,MAAMhC,UAAjBiC,OAAA,CAA2B7C,EAAEyC,UAGzDR,EAAKa,QAAU,WACXR,QAAQC,IAAI,UAGhB7B,EAAKkC,MAAQ,CACTpC,QAASyB,EACTrB,SAAU,IAzBCF,wEA8Bf,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAadH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAC8B,EAAS5C,KAAKyC,gBA/CjBlB,aCKEsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.492359dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\r\n\r\nclass Chat extends Component {\r\n    handleFormSubmit(e) {\r\n        e.preventDefault();\r\n        let text = this.refs.messageText.value;\r\n        this.props.actions.send(text);\r\n    }\r\n\r\n    render() {\r\n        let i = 0,\r\n            messages = this.props.messages.map(message => {\r\n               return <li className=\"list-group-item\" key={i++} style={{color: '#000'}}>{message}</li>\r\n            });\r\n        return (\r\n            <div className=\"container\">\r\n                <form onSubmit={(e) => this.handleFormSubmit(e)}>\r\n                    <div className=\"form-group\">\r\n                        <div className=\"input-group\">\r\n                            <input type=\"text\" ref=\"messageText\" className=\"form-control\"/>\r\n                            <span className=\"input-group-btn\">\r\n                                <button type=\"submit\" className=\"btn btn-prime\">Send</button>\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n                <ul className=\"list-group\">{messages}</ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Chat;\r\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SockJS from 'sockjs-client';\n\nimport Chat from './components/Chat';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        //create a new socket connection\n        //see documentation https://github.com/sockjs/sockjs-client#getting-started\n        const sock = new SockJS('https://chat-server.azurewebsites.net/chat');\n\n        let self = this;\n\n        sock.onopen = () => {\n            console.log('connection to server open');\n        };\n\n        sock.onmessage = e => {\n            console.log('message recieved:', e.data);\n            //incoming message from server, store in state\n            self.setState({ messages: [...self.state.messages, e.data]});\n        };\n\n        sock.onclose = () => {\n            console.log('close');\n        };\n\n        this.state = {\n            actions: sock,\n            messages: []\n        };\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    {/*<img src={logo} className=\"App-logo\" alt=\"logo\"/>*/}\n                    {/*<p>*/}\n                        {/*Edit <code>src/App.js</code> and save to reload.*/}\n                    {/*</p>*/}\n                    {/*<a*/}\n                        {/*className=\"App-link\"*/}\n                        {/*href=\"https://reactjs.org\"*/}\n                        {/*target=\"_blank\"*/}\n                        {/*rel=\"noopener noreferrer\"*/}\n                    {/*>*/}\n                        {/*Learn React*/}\n                    {/*</a>*/}\n                    <h2>Chat</h2>\n                    <Chat {...this.state}/>\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}